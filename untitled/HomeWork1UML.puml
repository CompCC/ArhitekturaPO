@startuml
class Sem5.presenters.BookingPresenter {
- View bookingView
- Model tableModel
- Collection<Table> loadTables()
+ void showTables()
- void showReservationTableResult(int)
+ void onReservationTable(Date,int,String)
}
class Sem5.models.TableModel {
- Collection<Table> tables
+ Collection<Table> loadTables()
+ int reservationTable(Date,int,String)
+ int changeReservationTable(int,int)
}
class Sem5.models.Reservation {
- {static} int counter
- int id
- Date date
- String name
+ int getId()
+ Date getDate()
+ String getName()
}
interface Sem5.presenters.View {
~ void setObserver(ViewObserver)
~ void updateTablesView(Collection<Table>)
~ void updateReservationTableResult(int)
}
class Sem5.Program {
+ {static} void main(String[])
}
interface Sem5.presenters.Model {
~ Collection<Table> loadTables()
~ int reservationTable(Date,int,String)
}
class Sem5.views.BookingView {
- ViewObserver observer
+ void setObserver(ViewObserver)
+ void updateTablesView(Collection<Table>)
+ void updateReservationTableResult(int)
+ void reservationTableEvent(Date,int,String)
+ void changeReservationTable(int,Date,int,String)
}
interface Sem5.presenters.ViewObserver {
~ void onReservationTable(Date,int,String)
}
class Sem5.models.Table {
- {static} int counter
- Collection<Reservation> reservations
- int no
+ int getNo()
+ Collection<Reservation> getReservations()
+ String toString()
}


Sem5.presenters.ViewObserver <|.. Sem5.presenters.BookingPresenter
Sem5.presenters.Model <|.. Sem5.models.TableModel
Sem5.presenters.View <|.. Sem5.views.BookingView
@enduml